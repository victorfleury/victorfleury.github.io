<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Victor Fleury</title>
        <link>http://example.org/posts/</link>
        <description>Recent content in Posts on Victor Fleury</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Victor Fleury</copyright>
        <lastBuildDate>Sun, 14 Jun 2020 20:55:41 -0500</lastBuildDate>
        <atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Implementing drag and drop in Python using Qt</title>
            <link>http://example.org/posts/qt_drag_n_drop/</link>
            <pubDate>Sun, 14 Jun 2020 20:55:41 -0500</pubDate>
            
            <guid>http://example.org/posts/qt_drag_n_drop/</guid>
            <description>Lately, I needed to implement a drag and drop behaviour to reorder widgets in a tool and this article is just a reminder to my future self on how to do it and what caveats I should remember avoiding.
I had to implement this using a model/view approach with Qt.
Here is the official doc : Qt Model/View Let&amp;rsquo;s get started ! So first let&amp;rsquo;s look at what the model needs in order to implement this correctly.</description>
            <content type="html"><![CDATA[<p>Lately, I needed to implement a drag and drop behaviour to reorder widgets in a tool and this article is just a reminder to my future self on how to do it and what caveats I should remember avoiding.</p>
<p>I had to implement this using a model/view approach with <code>Qt</code>.</p>
<p>Here is the official doc : <a href="https://doc.qt.io/qt-5/model-view-programming.html">Qt Model/View </a></p>
<h2 id="lets-get-started-">Let&rsquo;s get started !</h2>
<p>So first let&rsquo;s look at what the <code>model</code> needs in order to implement this correctly.</p>
<p>It needs to have the following methods (check the links for more information):</p>
<ul>
<li><a href="https://doc.qt.io/qt-5/qabstractitemmodel.html#insert"><code>insertRows()</code></a> : important not to use the <code>insertRow()</code> method. Qt&rsquo;s documentation sepcifies that <code>insertRows()</code> method should be implemented rather than this one.</li>
<li><a href="https://doc.qt.io/qt-5/qabstractitemmodel.html#removeRows"><code>removeRows()</code></a></li>
<li><a href="https://doc.qt.io/qt-5/qabstractitemmodel.html#mimeData"><code>mimeData()</code></a></li>
<li><a href="https://doc.qt.io/qt-5/qabstractitemmodel.html#mimeTypes"><code>mimeTypes()</code></a></li>
<li><a href="https://doc.qt.io/qt-5/qabstractitemmodel.html#dropMimeData"><code>dropMimeData()</code></a></li>
<li><a href="https://doc.qt.io/qt-5/qabstractitemmodel.html#flags"><code>flags()</code></a></li>
<li><a href="https://doc.qt.io/qt-5/qabstractitemmodel.html#supportedDropActions"><code>supportedDropActions()</code></a></li>
</ul>
<h3 id="starting-point--mimetypes">Starting point : mimeTypes()</h3>
<p>First, we need to reimplement the <code>mimeTypes()</code> method to let our model know that
it will only need to act if a certain type of data is dragged or dropped.
By default, the built-in models and views use an internal MIME type: application/x-qabstractitemmodeldatalist.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FoobarModel</span>(QtCore<span style="color:#f92672">.</span>QAbstractListModel):
</span></span><span style="display:flex;"><span>    MIME_TYPES_ACCEPTED <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;application/foobar_data&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mimeTypes</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Return a list of MIME types used to describe a list of indices.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Returns:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            list(str): A list of accepted mime types.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> [self<span style="color:#f92672">.</span>MIME_TYPES_ACCEPTED]
</span></span></code></pre></div><p>Since we defined a custom <code>mimeTypes()</code> we need to implement the <code>mimeData()</code> and <code>dropMimeData()</code> functions as well.</p>
<p>According to the documentation :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Returns an object that contains serialized items of data
</span></span><span style="display:flex;"><span>corresponding to the list of indexes specified.
</span></span><span style="display:flex;"><span>The format used to describe the encoded data is obtained from the mimeTypes<span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span>.
</span></span></code></pre></div><p>So we need to create an object that will contain serialized data and that is the <code>QMimeData</code> object.</p>
<p>According to the documentation again :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>QMimeData is used to describe information that can be stored in the clipboard,
</span></span><span style="display:flex;"><span>and transferred via the drag and drop mechanism.
</span></span><span style="display:flex;"><span>QMimeData objects associate the data that they hold with the corresponding MIME
</span></span><span style="display:flex;"><span>types to ensure that information can be safely transferred between applications
</span></span><span style="display:flex;"><span>and copied around within the same application.
</span></span></code></pre></div><p>Its data is stored as <code>QByteArray</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mimeData</span>(self, indexes):
</span></span><span style="display:flex;"><span>    mime_data <span style="color:#f92672">=</span> QtCore<span style="color:#f92672">.</span>QMimeData()
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> QtCore<span style="color:#f92672">.</span>QByteArray()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> indexes:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> index<span style="color:#f92672">.</span>isValid():
</span></span><span style="display:flex;"><span>            data<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#34;/</span><span style="color:#e6db74">{0}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(index<span style="color:#f92672">.</span>row()))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    mime_data<span style="color:#f92672">.</span>setData(self<span style="color:#f92672">.</span>MIME_VERSION, data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> mime_data
</span></span></code></pre></div><p>The data is stored as a plain string.
It can be a good idea to use a delimiter. That way we can store data for multiple rows and split it when processing the drop.</p>
<h3 id="what-kind-of-drop-can-i-do">What kind of drop can I do?</h3>
<p>We need to also define in the model what kind of drop it supports.</p>
<p>The default is the <code>QtCore.Qt.CopyAction</code> but I wanted to move things around hence the use of :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">supportedDropActions</span>(self):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> QtCore<span style="color:#f92672">.</span>Qt<span style="color:#f92672">.</span>MoveAction
</span></span></code></pre></div><h3 id="what-can-be-dragged-">What can be dragged ?</h3>
<p>To define which items can be dragged we need to implement the <code>flags()</code> method.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">flags</span>(self, index):
</span></span><span style="display:flex;"><span>    flags <span style="color:#f92672">=</span> super(FoobarModel, self)<span style="color:#f92672">.</span>flags(index)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> index<span style="color:#f92672">.</span>isValid():
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> QtCore<span style="color:#f92672">.</span>Qt<span style="color:#f92672">.</span>ItemIsEnabled <span style="color:#f92672">|</span> QtCore<span style="color:#f92672">.</span>Qt<span style="color:#f92672">.</span>ItemIsDropEnabled <span style="color:#f92672">|</span> flags
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> QtCore<span style="color:#f92672">.</span>Qt<span style="color:#f92672">.</span>ItemFlags(QtCore<span style="color:#f92672">.</span>Qt<span style="color:#f92672">.</span>ItemIsDragEnabled <span style="color:#f92672">|</span> flags)
</span></span></code></pre></div><p>With this we are doing two things :</p>
<ul>
<li>We first grab the defaults flags from the model.</li>
<li>We enhance the default flags to add the <code>QtCore.Qt.ItemIsDragEnabled</code></li>
<li>Then if the index is not valid (meaning we drop outside the items in the list)
then its flags are extended to support it with <code>QtCore.Qt.ItemIsDropEnabled</code></li>
</ul>
<h3 id="insert-rows-and-remove-them">Insert rows and remove them</h3>
<p>The next thing we need to implement now is the insertion and removal of the rows :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">insertRows</span>(self, row, count<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, parent<span style="color:#f92672">=</span>QtCore<span style="color:#f92672">.</span>QModelIndex()):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>beginInsertRows(parent, row, row <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>_data<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#39;Foo </span><span style="color:#e6db74">{0}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(str(row)<span style="color:#f92672">.</span>zfill(<span style="color:#ae81ff">4</span>)))
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>endInsertRows()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">removeRows</span>(self, row, count<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, parent<span style="color:#f92672">=</span>QtCore<span style="color:#f92672">.</span>QModelIndex()):
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>beginRemoveRows(parent, row, row <span style="color:#f92672">+</span> count <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>_data<span style="color:#f92672">.</span>pop(row)
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>endRemoveRows()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span></code></pre></div><h3 id="drop-the-stuff">Drop the stuff</h3>
<p>The dropping of items is handled by the <code>dropMimeData()</code> function.</p>
<p>Quick note, if you drop things at the very end of the list, the index value might
be <code>-1</code>, so in the case of our model it needs to be changed to the length of the
list.</p>
<p>The idea here is to :</p>
<ul>
<li>List the indexes of the items that are being moved.</li>
<li>Determine the row where we want to drop.</li>
<li>Create a list of items in reversed order to insert at the previously determined row.</li>
<li>Remove the selected rows at their current index.</li>
<li>Insert them at their new indexes.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">dropMimeData</span>(
</span></span><span style="display:flex;"><span>        self,
</span></span><span style="display:flex;"><span>        data,
</span></span><span style="display:flex;"><span>        action,
</span></span><span style="display:flex;"><span>        row,
</span></span><span style="display:flex;"><span>        column<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>        parent<span style="color:#f92672">=</span>QtCore<span style="color:#f92672">.</span>QModelIndex()):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> action <span style="color:#f92672">is</span> QtCore<span style="color:#f92672">.</span>Qt<span style="color:#f92672">.</span>IgnoreAction:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    indexes_of_items_to_move <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        i<span style="color:#f92672">.</span>toInt()[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> data<span style="color:#f92672">.</span>data(self<span style="color:#f92672">.</span>MIME_VERSION)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;/&#39;</span>)[<span style="color:#ae81ff">1</span>:]
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>    begin_row <span style="color:#f92672">=</span> row
</span></span><span style="display:flex;"><span>    dropping_outside <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> item_row <span style="color:#f92672">in</span> indexes_of_items_to_move:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> item_row <span style="color:#f92672">&lt;</span> row:
</span></span><span style="display:flex;"><span>            begin_row <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> row <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        begin_row <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>rowCount() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        dropping_outside <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    items_to_move <span style="color:#f92672">=</span> sorted(
</span></span><span style="display:flex;"><span>        [self<span style="color:#f92672">.</span>_data[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> indexes_of_items_to_move],
</span></span><span style="display:flex;"><span>        reverse<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>,
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> items_to_move:
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>beginRemoveRows(
</span></span><span style="display:flex;"><span>            parent, self<span style="color:#f92672">.</span>_data<span style="color:#f92672">.</span>index(item), self<span style="color:#f92672">.</span>_data<span style="color:#f92672">.</span>index(item),
</span></span><span style="display:flex;"><span>        )
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_data<span style="color:#f92672">.</span>pop(self<span style="color:#f92672">.</span>_data<span style="color:#f92672">.</span>index(item))
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>endRemoveRows()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> dropping_outside:
</span></span><span style="display:flex;"><span>        begin_row <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>rowCount()
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>beginInsertRows(
</span></span><span style="display:flex;"><span>        QtCore<span style="color:#f92672">.</span>QModelIndex(), begin_row, begin_row <span style="color:#f92672">+</span> len(items_to_move) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> items_to_move:
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>_data<span style="color:#f92672">.</span>insert(begin_row, item)
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>endInsertRows(),
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    first <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>index(begin_row, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    last <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>index(begin_row <span style="color:#f92672">+</span> len(items_to_move), <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    self<span style="color:#f92672">.</span>dataChanged<span style="color:#f92672">.</span>emit(first, last)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span></code></pre></div><h2 id="catch-and-caveats">Catch and Caveats</h2>
<h3 id="i-drop--my-items-but-some-of-my-rows-are-being-removed-">I drop  my items, but some of my rows are being removed !</h3>
<p>If you take care of the reordering in the <code>dropMimeData()</code> method, be sure to not return <code>True</code> at the end as the Qt documentation is adivsing.
If you return <code>True</code> then the <code>removeRows()</code> method gets called as the model data has changed.
And you will end up with rows getting removed although you just wanted to move them.</p>
<h2 id="bonus-points">BONUS Points:</h2>
<p>If you want to have a custom indicator of the widgets you are dragging, you need to reimplement the method <code>startDrag()</code> on the view.</p>
<p>We&rsquo;ll see that next time !</p>
<script src="https://gist.github.com/victorfleury/d895872f0ae7cbff41db636c6e70ae55.js"></script>

]]></content>
        </item>
        
    </channel>
</rss>
